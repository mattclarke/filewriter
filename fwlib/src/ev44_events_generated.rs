// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum Event44MessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Event44Message<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Event44Message<'a> {
    type Inner = Event44Message<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> Event44Message<'a> {
    pub const VT_SOURCE_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_MESSAGE_ID: flatbuffers::VOffsetT = 6;
    pub const VT_REFERENCE_TIME: flatbuffers::VOffsetT = 8;
    pub const VT_REFERENCE_TIME_INDEX: flatbuffers::VOffsetT = 10;
    pub const VT_TIME_OF_FLIGHT: flatbuffers::VOffsetT = 12;
    pub const VT_PIXEL_ID: flatbuffers::VOffsetT = 14;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Event44Message { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args Event44MessageArgs<'args>,
    ) -> flatbuffers::WIPOffset<Event44Message<'bldr>> {
        let mut builder = Event44MessageBuilder::new(_fbb);
        builder.add_message_id(args.message_id);
        if let Some(x) = args.pixel_id {
            builder.add_pixel_id(x);
        }
        if let Some(x) = args.time_of_flight {
            builder.add_time_of_flight(x);
        }
        if let Some(x) = args.reference_time_index {
            builder.add_reference_time_index(x);
        }
        if let Some(x) = args.reference_time {
            builder.add_reference_time(x);
        }
        if let Some(x) = args.source_name {
            builder.add_source_name(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn source_name(&self) -> &'a str {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(Event44Message::VT_SOURCE_NAME, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn message_id(&self) -> i64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<i64>(Event44Message::VT_MESSAGE_ID, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn reference_time(&self) -> flatbuffers::Vector<'a, i64> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(
                    Event44Message::VT_REFERENCE_TIME,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn reference_time_index(&self) -> flatbuffers::Vector<'a, i32> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(
                    Event44Message::VT_REFERENCE_TIME_INDEX,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn time_of_flight(&self) -> Option<flatbuffers::Vector<'a, i32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(
                    Event44Message::VT_TIME_OF_FLIGHT,
                    None,
                )
        }
    }
    #[inline]
    pub fn pixel_id(&self) -> Option<flatbuffers::Vector<'a, i32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(
                    Event44Message::VT_PIXEL_ID,
                    None,
                )
        }
    }
}

impl flatbuffers::Verifiable for Event44Message<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                "source_name",
                Self::VT_SOURCE_NAME,
                true,
            )?
            .visit_field::<i64>("message_id", Self::VT_MESSAGE_ID, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>(
                "reference_time",
                Self::VT_REFERENCE_TIME,
                true,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>(
                "reference_time_index",
                Self::VT_REFERENCE_TIME_INDEX,
                true,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>(
                "time_of_flight",
                Self::VT_TIME_OF_FLIGHT,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>(
                "pixel_id",
                Self::VT_PIXEL_ID,
                false,
            )?
            .finish();
        Ok(())
    }
}
pub struct Event44MessageArgs<'a> {
    pub source_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub message_id: i64,
    pub reference_time: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub reference_time_index: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub time_of_flight: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub pixel_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for Event44MessageArgs<'a> {
    #[inline]
    fn default() -> Self {
        Event44MessageArgs {
            source_name: None, // required field
            message_id: 0,
            reference_time: None,       // required field
            reference_time_index: None, // required field
            time_of_flight: None,
            pixel_id: None,
        }
    }
}

pub struct Event44MessageBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Event44MessageBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_source_name(&mut self, source_name: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            Event44Message::VT_SOURCE_NAME,
            source_name,
        );
    }
    #[inline]
    pub fn add_message_id(&mut self, message_id: i64) {
        self.fbb_
            .push_slot::<i64>(Event44Message::VT_MESSAGE_ID, message_id, 0);
    }
    #[inline]
    pub fn add_reference_time(
        &mut self,
        reference_time: flatbuffers::WIPOffset<flatbuffers::Vector<'b, i64>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            Event44Message::VT_REFERENCE_TIME,
            reference_time,
        );
    }
    #[inline]
    pub fn add_reference_time_index(
        &mut self,
        reference_time_index: flatbuffers::WIPOffset<flatbuffers::Vector<'b, i32>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            Event44Message::VT_REFERENCE_TIME_INDEX,
            reference_time_index,
        );
    }
    #[inline]
    pub fn add_time_of_flight(
        &mut self,
        time_of_flight: flatbuffers::WIPOffset<flatbuffers::Vector<'b, i32>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            Event44Message::VT_TIME_OF_FLIGHT,
            time_of_flight,
        );
    }
    #[inline]
    pub fn add_pixel_id(&mut self, pixel_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b, i32>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(Event44Message::VT_PIXEL_ID, pixel_id);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> Event44MessageBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        Event44MessageBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Event44Message<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_
            .required(o, Event44Message::VT_SOURCE_NAME, "source_name");
        self.fbb_
            .required(o, Event44Message::VT_REFERENCE_TIME, "reference_time");
        self.fbb_.required(
            o,
            Event44Message::VT_REFERENCE_TIME_INDEX,
            "reference_time_index",
        );
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for Event44Message<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("Event44Message");
        ds.field("source_name", &self.source_name());
        ds.field("message_id", &self.message_id());
        ds.field("reference_time", &self.reference_time());
        ds.field("reference_time_index", &self.reference_time_index());
        ds.field("time_of_flight", &self.time_of_flight());
        ds.field("pixel_id", &self.pixel_id());
        ds.finish()
    }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Event44Message`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_event_44_message_unchecked`.
pub fn root_as_event_44_message(
    buf: &[u8],
) -> Result<Event44Message, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<Event44Message>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Event44Message` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_event_44_message_unchecked`.
pub fn size_prefixed_root_as_event_44_message(
    buf: &[u8],
) -> Result<Event44Message, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<Event44Message>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Event44Message` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_event_44_message_unchecked`.
pub fn root_as_event_44_message_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<Event44Message<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<Event44Message<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Event44Message` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_event_44_message_unchecked`.
pub fn size_prefixed_root_as_event_44_message_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<Event44Message<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<Event44Message<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Event44Message and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Event44Message`.
pub unsafe fn root_as_event_44_message_unchecked(buf: &[u8]) -> Event44Message {
    flatbuffers::root_unchecked::<Event44Message>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Event44Message and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Event44Message`.
pub unsafe fn size_prefixed_root_as_event_44_message_unchecked(buf: &[u8]) -> Event44Message {
    flatbuffers::size_prefixed_root_unchecked::<Event44Message>(buf)
}
pub const EVENT_44_MESSAGE_IDENTIFIER: &str = "ev44";

#[inline]
pub fn event_44_message_buffer_has_identifier(buf: &[u8]) -> bool {
    flatbuffers::buffer_has_identifier(buf, EVENT_44_MESSAGE_IDENTIFIER, false)
}

#[inline]
pub fn event_44_message_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
    flatbuffers::buffer_has_identifier(buf, EVENT_44_MESSAGE_IDENTIFIER, true)
}

#[inline]
pub fn finish_event_44_message_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Event44Message<'a>>,
) {
    fbb.finish(root, Some(EVENT_44_MESSAGE_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_event_44_message_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Event44Message<'a>>,
) {
    fbb.finish_size_prefixed(root, Some(EVENT_44_MESSAGE_IDENTIFIER));
}
